{"version":3,"sources":["components/selectButtons/selectButtons.js","components/controlButtons/controlButtons.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["SelectButtons","props","react_default","a","createElement","className","onClick","breakDec","break","breakInc","decreaseFunc","buttonMinutes","increaseFunc","ControlButtons","startClick","pauseFunc","resetFunc","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","minutesZero","minutes","secondsZero","seconds","type","switch","pause","bind","assertThisInitialized","updateFunc","setState","document","getElementById","play","_this2","interval","setInterval","clearInterval","pauseInterval","_this3","src","logo","alt","id","selectButtons","controlButtons","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.10dd60dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SelectButtons = (props) => {\r\n    return (\r\n        <div>\r\n            <div className=\"break-buttons\"> \r\n            <h1> Break Length </h1>\r\n                <button onClick={props.breakDec}> &dArr; </button>\r\n                <h2> {props.break} </h2>\r\n                <button onClick={props.breakInc}> &uArr; </button>\r\n            </div>\r\n\r\n            <div className=\"session-buttons\">\r\n            <h1>Session Length</h1>\r\n                <button onClick={props.decreaseFunc}> &dArr; </button>\r\n                <h2> {props.buttonMinutes} </h2>\r\n                <button onClick={props.increaseFunc}> &uArr; </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SelectButtons","import React from 'react';\r\n\r\nconst ControlButtons = (props) => {\r\n    return (\r\n        <div>\r\n            <button onClick={props.startClick}> Start </button>\r\n            <button onClick={props.pauseFunc}> Pause&Play </button> \r\n            <button onClick={props.resetFunc}> Reset </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlButtons","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport SelectButtons from './components/selectButtons/selectButtons.js'\r\nimport ControlButtons from './components/controlButtons/controlButtons.js'\r\n\r\n/* the parent component having the minuteszero state which render when minutes < 10, secondzero renders\r\n  when seconds is zero, type wich switches the countdown from session to break, switch that shows if code\r\n  is already rendering per seconds, pause which shows if the rendering is paused, minutes and seconds are\r\n  used for countdown, buttonMinutes is used for button display as well aa break  */\r\nclass Home extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      minutesZero: '',\r\n      minutes: 25,\r\n      buttonMinutes: 25,\r\n\r\n      secondsZero: 0,\r\n      seconds: 0,\r\n\r\n      break : 5,\r\n\r\n      type: 'SESSION',\r\n      switch: false,\r\n      pause: false\r\n    }\r\n\r\n  this.startClick = this.startClick.bind(this);\r\n  this.updateFunc = this.updateFunc.bind(this);\r\n  this.increaseFunc = this.increaseFunc.bind(this);\r\n  this.decreaseFunc = this.decreaseFunc.bind(this);\r\n  this.breakInc = this.breakInc.bind(this);\r\n  this.breakDec = this.breakDec.bind(this);\r\n  this.resetFunc = this.resetFunc.bind(this);\r\n  this.pauseFunc = this.pauseFunc.bind(this);\r\n  }\r\n\r\n/*  break button increase if switch is false(off) */\r\n  breakInc(){\r\n    if (!this.state.switch){\r\n      if(this.state.break < 60){\r\n        this.setState({break: this.state.break + 1});\r\n      }\r\n    }\r\n  }\r\n\r\n/*  break button decrease if switch is false(off)  */\r\n  breakDec(){\r\n    if(!this.state.switch){\r\n      if(this.state.break > 1){\r\n        this.setState({break: this.state.break - 1});\r\n      }\r\n    }\r\n  }\r\n  /* function that renders every second through the setInterval in start button  */\r\n  updateFunc(){\r\n    this.setState({seconds : this.state.seconds - 1});\r\n\r\n    if(this.state.seconds < 0){\r\n      this.setState({\r\n        secondsZero: '',\r\n        seconds: 59,\r\n        minutes: this.state.minutes - 1\r\n      });\r\n    }\r\n\r\n    if (this.state.seconds < 10){\r\n      this.setState({\r\n        secondsZero: 0\r\n      });\r\n    }\r\n\r\n    if (this.state.minutes < 10 ){\r\n      this.setState({\r\n        minutesZero: 0\r\n      });\r\n    }\r\n\r\n    /* if statement that switches to break when session has finished its countdown*/\r\n    if(this.state.minutes == 0 && this.state.seconds == 0 && this.state.type == 'SESSION'){\r\n      this.setState({\r\n        minutes : this.state.break,\r\n        type: 'BREAK'\r\n      });\r\n      document.getElementById('audio').play();\r\n    }\r\n\r\n    /* if statement that switches to session when break has finished its countdown*/\r\n    if(this.state.minutes == 0 && this.state.seconds == 0 && this.state.type == 'BREAK'){\r\n      this.setState({\r\n        minutes: this.state.buttonMinutes,\r\n        type: 'SESSION'\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  /* start button function, its rendered when switch is only false*/\r\n  startClick(){\r\n    if (!this.state.switch){\r\n      this.setState({\r\n        secondsZero: '',\r\n        seconds: 59,\r\n        minutes: this.state.minutes - 1,\r\n        switch: true\r\n      });\r\n\r\n      this.interval = setInterval(() => {\r\n        this.updateFunc()\r\n      }, 1000);\r\n\r\n    }\r\n  }\r\n\r\n  /* session's increase button functio */\r\n  increaseFunc(){\r\n    if(!this.state.switch){\r\n      if(this.state.buttonMinutes < 60){\r\n        this.setState({\r\n          minutes: this.state.minutes + 1,\r\n          buttonMinutes: this.state.buttonMinutes + 1\r\n        });\r\n      }\r\n\r\n      /*\r\n      an if statement that adds 0 state's minutes when lesser than 10 when the increase button is clicked.\r\n      if 10 is used, it also adds at 10 so 9 is used.\r\n     */\r\n      if (this.state.minutes < 9){\r\n        this.setState({\r\n          minutesZero: 0\r\n        });\r\n      }else{\r\n        this.setState({\r\n         minutesZero: ''\r\n        })\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  /* session's decrease button function */\r\n  decreaseFunc(){\r\n    if(!this.state.switch){\r\n        if(this.state.buttonMinutes > 1){\r\n        this.setState({\r\n          minutes: this.state.minutes - 1,\r\n          buttonMinutes: this.state.buttonMinutes - 1\r\n        });\r\n      }\r\n      \r\n      /*\r\n        an if statement that adds 0 to the state's minutes when lesser than 10 when the decrease button is\r\n        clicked. if 9/10 is used, it adds at 7/8 so 11 is used.\r\n      */\r\n      if(this.state.minutes < 11){\r\n        if(this.minutesZero == 0){\r\n          this.setState({\r\n            minutesZero: ''\r\n          });\r\n        }else{\r\n          this.setState({\r\n            minutesZero: 0\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* reset button function where all intervals are cleared and all state are set to default */\r\n  resetFunc(){\r\n    clearInterval(this.interval);\r\n    clearInterval(this.pauseInterval);\r\n    \r\n    this.setState({\r\n      minutesZero: '',\r\n      minutes: 25,\r\n      buttonMinutes: 25,\r\n\r\n      secondsZero: 0,\r\n      seconds: 0,\r\n\r\n      break : 5,\r\n\r\n      type: 'SESSION',\r\n      switch: false\r\n    });\r\n  }\r\n\r\n  /* pause function button where intervals are clared when switched is on and pause if false but will\r\n    also set the pause true, but if switch is on and pause is true, interval is set with the same as \r\n    the start button */\r\n  pauseFunc(){\r\n    if(this.state.switch){\r\n      if(!this.state.pause){\r\n        clearInterval(this.interval);\r\n        clearInterval(this.pauseInterval);\r\n        this.setState({pause: true});\r\n      }\r\n\r\n      if(this.state.pause){\r\n        this.pauseInterval = setInterval(() => {\r\n          this.updateFunc()\r\n        }, 1000);\r\n        this.setState({pause: false});\r\n      }\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"home-container\">\r\n\r\n        <h1><img src={logo} className=\"App-logo\" alt=\"logo\" />Pomodoro Clock</h1>\r\n\r\n        <audio id=\"audio\"> <source src=\"https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3\" type=\"audio/mp3\" /> </audio>\r\n\r\n        <SelectButtons \r\n        break={this.state.break} \r\n        buttonMinutes={this.state.buttonMinutes} \r\n        increaseFunc={this.increaseFunc}\r\n        decreaseFunc={this.decreaseFunc}\r\n        breakInc={this.breakInc}\r\n        breakDec={this.breakDec}\r\n        />\r\n        \r\n        {/*the timer display div */}\r\n        <div className=\"timer-container\">\r\n          <h1>{this.state.type}</h1>\r\n          <h1> \r\n          {this.state.minutesZero}{this.state.minutes} : {this.state.secondsZero}{this.state.seconds} \r\n          </h1>\r\n        </div>\r\n\r\n        <ControlButtons \r\n        startClick={this.startClick} \r\n        resetFunc={this.resetFunc}\r\n        pauseFunc={this.pauseFunc}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}